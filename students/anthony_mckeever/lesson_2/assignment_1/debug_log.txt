Advanced Programming In Python - Lesson 2 Assigmnet 1: Automated Testing
RedMine Issue - SchoolOps-12
Code Poet: Anthony McKeever
Start Date: 10/24/2019
End Date: 10/25/2019

Debug Log:

First Bug Summary:
Exception occurs upon trying to calculate the square root of a negative number (in this case: total_price).
Negative number caused by invalid date range between the rental_start and rental_end dates.  Upon failure,
application would exit without any indication that an error or miscalculation had occured.

First Bug Repro Steps:
    1. Create a json file with the example input below.
        a. Note: rental_end must be a date BEFORE the rental_start date.
        b. Example: rental_start: 8/31/2353, rental_end: 9/15/2153
    2. Run command `python charges_calc.py -i buggy.json -o output.json`
        a. Note: Replace "buggy.json" with the name of the JSON file you created
    3. Note how the `output.json` file is not created and no error is logged to file and/or console.
        a. The application will silently exit with no indication of failure.

First Bug Example Input:
{  
  "SomeCoolThing": {
    "product_code": "SCT_123",
    "units_rented": 8,
    "price_per_day": 31,
    "rental_start": "8/31/2353",
    "rental_end": "9/15/2153"
  }
}

First Bug Solution:
* Implement logging in the application to determine what has failed, why and when.
    * Logging criteria include:
        * WARNING when an data value from the JSON file is unexpected
        * ERRROR when an exception occurs
        * INFO for other points of interest such as the value being processed.
* Rewrite try/except in calculate_additional_fields to log a the error and continue processing data instead of exiting the application.
* Rewrite try/except in load_rentals_file to log when loading a json file fails but keep application exit.
* Wrap the write file logic in save_to_json in a try/except and log if that encounters an issue when saving.

First Bug Debug Steps:

F:\gitUwPython\SP_Python220B_2019\students\anthony_mckeever\lesson_2\assignment_1\code>python -m pdb charges_calc.py -i source.json -o output.json
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(3)<module>()
-> '''
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8
  9     def parse_cmd_arguments():
 10         parser = argparse.ArgumentParser(description='Process some integers.')
 11         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 12         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 13
 14         return parser.parse_args()
 15
 16
 17     def load_rentals_file(filename):
 18         with open(filename) as file:
 19             try:
 20                 data = json.load(file)
 21             except:
 22                 exit(0)
 23         return data
 24
 25     def calculate_additional_fields(data):
 26         for value in data.values():
 27             try:
 28                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30                 value['total_days'] = (rental_end - rental_start).days
 31                 value['total_price'] = value['total_days'] * value['price_per_day']
 32                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33                 value['unit_cost'] = value['total_price'] / value['units_rented']
 34             except:
 35                 exit(0)
 36
 37         return data
 38
 39     def save_to_json(filename, data):
 40         with open(filename, 'w') as file:
 41             json.dump(data, file)
 42
 43     if __name__ == "__main__":
 44         args = parse_cmd_arguments()
 45         data = load_rentals_file(args.input)
 46         data = calculate_additional_fields(data)
 47         save_to_json(args.output, data)
(Pdb) b 44
Breakpoint 1 at f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py:44
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8
  9     def parse_cmd_arguments():
 10         parser = argparse.ArgumentParser(description='Process some integers.')
 11         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 12         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 13
 14         return parser.parse_args()
 15
 16
 17     def load_rentals_file(filename):
 18         with open(filename) as file:
 19             try:
 20                 data = json.load(file)
 21             except:
 22                 exit(0)
 23         return data
 24
 25     def calculate_additional_fields(data):
 26         for value in data.values():
 27             try:
 28                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30                 value['total_days'] = (rental_end - rental_start).days
 31                 value['total_price'] = value['total_days'] * value['price_per_day']
 32                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33                 value['unit_cost'] = value['total_price'] / value['units_rented']
 34             except:
 35                 exit(0)
 36
 37         return data
 38
 39     def save_to_json(filename, data):
 40         with open(filename, 'w') as file:
 41             json.dump(data, file)
 42
 43     if __name__ == "__main__":
 44 B       args = parse_cmd_arguments()
 45         data = load_rentals_file(args.input)
 46         data = calculate_additional_fields(data)
 47         save_to_json(args.output, data)
(Pdb) c
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(44)<module>()
-> args = parse_cmd_arguments()
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3     '''
  4     import argparse
  5     import json
  6     import datetime
  7     import math
  8
  9     def parse_cmd_arguments():
 10         parser = argparse.ArgumentParser(description='Process some integers.')
 11         parser.add_argument('-i', '--input', help='input JSON file', required=True)
 12         parser.add_argument('-o', '--output', help='ouput JSON file', required=True)
 13
 14         return parser.parse_args()
 15
 16
 17     def load_rentals_file(filename):
 18         with open(filename) as file:
 19             try:
 20                 data = json.load(file)
 21             except:
 22                 exit(0)
 23         return data
 24
 25     def calculate_additional_fields(data):
 26         for value in data.values():
 27             try:
 28                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30                 value['total_days'] = (rental_end - rental_start).days
 31                 value['total_price'] = value['total_days'] * value['price_per_day']
 32                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33                 value['unit_cost'] = value['total_price'] / value['units_rented']
 34             except:
 35                 exit(0)
 36
 37         return data
 38
 39     def save_to_json(filename, data):
 40         with open(filename, 'w') as file:
 41             json.dump(data, file)
 42
 43     if __name__ == "__main__":
 44 B->     args = parse_cmd_arguments()
 45         data = load_rentals_file(args.input)
 46         data = calculate_additional_fields(data)
 47         save_to_json(args.output, data)
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(45)<module>()
-> data = load_rentals_file(args.input)
(Pdb) args
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(46)<module>()
-> data = calculate_additional_fields(data)
(Pdb) s
--Call--
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(25)calculate_additional_fields()
-> def calculate_additional_fields(data):
(Pdb) ll
 25  -> def calculate_additional_fields(data):
 26         for value in data.values():
 27             try:
 28                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30                 value['total_days'] = (rental_end - rental_start).days
 31                 value['total_price'] = value['total_days'] * value['price_per_day']
 32                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33                 value['unit_cost'] = value['total_price'] / value['units_rented']
 34             except:
 35                 exit(0)
 36
 37         return data
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(26)calculate_additional_fields()
-> for value in data.values():
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(27)calculate_additional_fields()
-> try:
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(28)calculate_additional_fields()
-> rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(29)calculate_additional_fields()
-> rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(30)calculate_additional_fields()
-> value['total_days'] = (rental_end - rental_start).days
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(31)calculate_additional_fields()
-> value['total_price'] = value['total_days'] * value['price_per_day']
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(32)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) n
ValueError: math domain error
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(32)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(34)calculate_additional_fields()
-> except:
(Pdb) ll
 25     def calculate_additional_fields(data):
 26         for value in data.values():
 27             try:
 28                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 29                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 30                 value['total_days'] = (rental_end - rental_start).days
 31                 value['total_price'] = value['total_days'] * value['price_per_day']
 32                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 33                 value['unit_cost'] = value['total_price'] / value['units_rented']
 34  ->         except:
 35                 exit(0)
 36
 37         return data
(Pdb) value
{'product_code': 'PRD80', 'units_rented': 8, 'price_per_day': 31, 'rental_start': '6/12/17', 'rental_end': '3/22/17', 'total_days': -82, 'total_price': -2542}



----------------------------------------------------------------------------------------------------------------------------------------------------------------



Second Bug Summary:
Unhandled Exception occurs upon trying to parse a datetime from an empty string.

Second Bug Repro Steps:
    1. Create a json file with the example input below.
        a. Note: rental_end and/or rental_start should be empty.
    2. Run command `python charges_calc.py -i buggy.json -o output.json`
        a. Note: Replace "buggy.json" with the name of the JSON file you created
    3. Note how a value exception error is thrown.

Second Bug Example Input:
{  
  "SomeCoolThing": {
    "product_code": "SCT_123",
    "units_rented": 8,
    "price_per_day": 31,
    "rental_start": "8/31/2353",
    "rental_end": ""
  }
}

Second Bug Solution:
* Wrap all calculation logic of calculate_additional_fields in the try/except block.
* Log error and continue processing good data.

Additional Suggestions:
* Only log the value object when error or warning occurs to not flood the log.
* Continue upon logging the warning for invalid date range.

F:\gitUwPython\SP_Python220B_2019\students\anthony_mckeever\lesson_2\assignment_1\code>python -m pdb charges_calc.py -i source.json -o output.json -d 2
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(3)<module>()
-> '''
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import datetime
  6     import json
  7     import logging
  8     import math
  9     import errno
 10
 11     from argparse import RawTextHelpFormatter
 12
 13     def parse_cmd_arguments():
 14         debug_help = str('Sets the logging level.' +
 15                          '\nAccepted values:'
 16                          '\n\t0 - None (default)' +
 17                          '\n\t1 - errors only' +
 18                          '\n\t2 - errors and warnings,' +
 19                          '\n\t3 - errors, warnings and debug messages')
 20
 21         parser = argparse.ArgumentParser(description='Process some integers.',
 22                                          formatter_class=RawTextHelpFormatter)
 23         parser.add_argument('-i', '--input',
 24                             help='input JSON file', required=True)
 25         parser.add_argument('-o', '--output',
 26                             help='ouput JSON file', required=True)
 27         parser.add_argument('-d', '--debug', type=int, default=0, help=debug_help)
 28
 29         return parser.parse_args()
 30
 31     def set_logging(level):
 32         log_level = parse_log_level(level)
 33         log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'.log'
 34         formatter = str("%(asctime)s %(filename)s:%(lineno)-3d " +
 35                         "%(levelname)s %(message)s")
 36         log_format = logging.Formatter(formatter)
 37
 38         file_handler = get_handler(logging.FileHandler, log_level, log_format, log_file)
 39         console_handler = get_handler(logging.StreamHandler, log_level, log_format)
 40
 41         logger = logging.getLogger()
 42         logger.setLevel(log_level)
 43         logger.addHandler(file_handler)
 44         logger.addHandler(console_handler)
 45
 46     def get_handler(handler, log_level, formatter, file=None):
 47         return_handler = handler(file)
 48         return_handler.setLevel(log_level)
 49         return_handler.setFormatter(formatter)
 50         return return_handler
 51
 52     def parse_log_level(level):
 53         if level == 0:
 54             return logging.NOTSET
 55         elif level == 1:
 56             return logging.ERROR
 57         elif level == 2:
 58             return logging.WARNING
 59         elif level == 3:
 60             return logging.DEBUG
 61
 62         raise ValueError(f"Logging level {level} has no implementation.")
 63
 64     def load_rentals_file(filename):
 65         try:
 66             with open(filename) as file:
 67                 data = json.load(file)
 68         except Exception as e:
 69             logging.error(e)
 70             logging.debug(f"Unable to load file: {filename}")
 71             exit(errno.EAGAIN)  # Exit with code to tell OS a problem occured.
 72         return data
 73
 74     def calculate_additional_fields(data):
 75         for value in data.values():
 76             logging.info(f"Processing value: {value}")
 77             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 78             rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 79
 80             if rental_end < rental_start:
 81                 logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 82
 83             try:
 84                 value['total_days'] = (rental_end - rental_start).days
 85                 value['total_price'] = value['total_days'] * value['price_per_day']
 86                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 87                 value['unit_cost'] = value['total_price'] / value['units_rented']
 88             except Exception as e:
 89                 logging.error(e)
 90
 91         return data
 92
 93     def save_to_json(filename, data):
 94         try:
 95             with open(filename, 'w') as file:
 96                 json.dump(data, file)
 97         except Exception as e:
 98             logging.error(e)
 99             logging.debug(f"Unable to save file: {filename}")
100             exit(errno.EAGAIN)  # Exit with code to tell OS a problem occured.
101
102     if __name__ == "__main__":
103         args = parse_cmd_arguments()
104         set_logging(args.debug)
105         data = load_rentals_file(args.input)
106         data = calculate_additional_fields(data)
107         save_to_json(args.output, data)
(Pdb) b 106
Breakpoint 1 at f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py:106
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import datetime
  6     import json
  7     import logging
  8     import math
  9     import errno
 10
 11     from argparse import RawTextHelpFormatter
 12
 13     def parse_cmd_arguments():
 14         debug_help = str('Sets the logging level.' +
 15                          '\nAccepted values:'
 16                          '\n\t0 - None (default)' +
 17                          '\n\t1 - errors only' +
 18                          '\n\t2 - errors and warnings,' +
 19                          '\n\t3 - errors, warnings and debug messages')
 20
 21         parser = argparse.ArgumentParser(description='Process some integers.',
 22                                          formatter_class=RawTextHelpFormatter)
 23         parser.add_argument('-i', '--input',
 24                             help='input JSON file', required=True)
 25         parser.add_argument('-o', '--output',
 26                             help='ouput JSON file', required=True)
 27         parser.add_argument('-d', '--debug', type=int, default=0, help=debug_help)
 28
 29         return parser.parse_args()
 30
 31     def set_logging(level):
 32         log_level = parse_log_level(level)
 33         log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'.log'
 34         formatter = str("%(asctime)s %(filename)s:%(lineno)-3d " +
 35                         "%(levelname)s %(message)s")
 36         log_format = logging.Formatter(formatter)
 37
 38         file_handler = get_handler(logging.FileHandler, log_level, log_format, log_file)
 39         console_handler = get_handler(logging.StreamHandler, log_level, log_format)
 40
 41         logger = logging.getLogger()
 42         logger.setLevel(log_level)
 43         logger.addHandler(file_handler)
 44         logger.addHandler(console_handler)
 45
 46     def get_handler(handler, log_level, formatter, file=None):
 47         return_handler = handler(file)
 48         return_handler.setLevel(log_level)
 49         return_handler.setFormatter(formatter)
 50         return return_handler
 51
 52     def parse_log_level(level):
 53         if level == 0:
 54             return logging.NOTSET
 55         elif level == 1:
 56             return logging.ERROR
 57         elif level == 2:
 58             return logging.WARNING
 59         elif level == 3:
 60             return logging.DEBUG
 61
 62         raise ValueError(f"Logging level {level} has no implementation.")
 63
 64     def load_rentals_file(filename):
 65         try:
 66             with open(filename) as file:
 67                 data = json.load(file)
 68         except Exception as e:
 69             logging.error(e)
 70             logging.debug(f"Unable to load file: {filename}")
 71             exit(errno.EAGAIN)  # Exit with code to tell OS a problem occured.
 72         return data
 73
 74     def calculate_additional_fields(data):
 75         for value in data.values():
 76             logging.info(f"Processing value: {value}")
 77             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 78             rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 79
 80             if rental_end < rental_start:
 81                 logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 82
 83             try:
 84                 value['total_days'] = (rental_end - rental_start).days
 85                 value['total_price'] = value['total_days'] * value['price_per_day']
 86                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 87                 value['unit_cost'] = value['total_price'] / value['units_rented']
 88             except Exception as e:
 89                 logging.error(e)
 90
 91         return data
 92
 93     def save_to_json(filename, data):
 94         try:
 95             with open(filename, 'w') as file:
 96                 json.dump(data, file)
 97         except Exception as e:
 98             logging.error(e)
 99             logging.debug(f"Unable to save file: {filename}")
100             exit(errno.EAGAIN)  # Exit with code to tell OS a problem occured.
101
102     if __name__ == "__main__":
103         args = parse_cmd_arguments()
104         set_logging(args.debug)
105         data = load_rentals_file(args.input)
106 B       data = calculate_additional_fields(data)
107         save_to_json(args.output, data)
(Pdb) c
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(106)<module>()
-> data = calculate_additional_fields(data)
(Pdb) s
--Call--
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(74)calculate_additional_fields()
-> def calculate_additional_fields(data):
(Pdb) ll
 74  -> def calculate_additional_fields(data):
 75         for value in data.values():
 76             logging.info(f"Processing value: {value}")
 77             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 78             rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 79
 80             if rental_end < rental_start:
 81                 logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 82
 83             try:
 84                 value['total_days'] = (rental_end - rental_start).days
 85                 value['total_price'] = value['total_days'] * value['price_per_day']
 86                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 87                 value['unit_cost'] = value['total_price'] / value['units_rented']
 88             except Exception as e:
 89                 logging.error(e)
 90
 91         return data
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(75)calculate_additional_fields()
-> for value in data.values():
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(76)calculate_additional_fields()
-> logging.info(f"Processing value: {value}")
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(77)calculate_additional_fields()
-> rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(78)calculate_additional_fields()
-> rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(80)calculate_additional_fields()
-> if rental_end < rental_start:
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(81)calculate_additional_fields()
-> logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
(Pdb) n
2019-10-24 22:34:21,117 charges_calc.py:81  WARNING rental_end: 2017-03-22 00:00:00 is a date before rental_start: 2017-06-12 00:00:00
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(83)calculate_additional_fields()
-> try:
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(84)calculate_additional_fields()
-> value['total_days'] = (rental_end - rental_start).days
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(85)calculate_additional_fields()
-> value['total_price'] = value['total_days'] * value['price_per_day']
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(86)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) n
ValueError: math domain error
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(86)calculate_additional_fields()
-> value['sqrt_total_price'] = math.sqrt(value['total_price'])
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(88)calculate_additional_fields()
-> except Exception as e:
(Pdb) ll
 74     def calculate_additional_fields(data):
 75         for value in data.values():
 76             logging.info(f"Processing value: {value}")
 77             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 78             rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 79
 80             if rental_end < rental_start:
 81                 logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 82
 83             try:
 84                 value['total_days'] = (rental_end - rental_start).days
 85                 value['total_price'] = value['total_days'] * value['price_per_day']
 86                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 87                 value['unit_cost'] = value['total_price'] / value['units_rented']
 88  ->         except Exception as e:
 89                 logging.error(e)
 90
 91         return data
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(89)calculate_additional_fields()
-> logging.error(e)
(Pdb) n
2019-10-24 22:35:05,330 charges_calc.py:89  ERROR math domain error
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(75)calculate_additional_fields()
-> for value in data.values():
(Pdb) ll
 74     def calculate_additional_fields(data):
 75  ->     for value in data.values():
 76             logging.info(f"Processing value: {value}")
 77             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 78             rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 79
 80             if rental_end < rental_start:
 81                 logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 82
 83             try:
 84                 value['total_days'] = (rental_end - rental_start).days
 85                 value['total_price'] = value['total_days'] * value['price_per_day']
 86                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 87                 value['unit_cost'] = value['total_price'] / value['units_rented']
 88             except Exception as e:
 89                 logging.error(e)
 90
 91         return data
(Pdb) b 91
Breakpoint 2 at f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py:91
(Pdb) ll
 74     def calculate_additional_fields(data):
 75  ->     for value in data.values():
 76             logging.info(f"Processing value: {value}")
 77             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 78             rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 79
 80             if rental_end < rental_start:
 81                 logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 82
 83             try:
 84                 value['total_days'] = (rental_end - rental_start).days
 85                 value['total_price'] = value['total_days'] * value['price_per_day']
 86                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 87                 value['unit_cost'] = value['total_price'] / value['units_rented']
 88             except Exception as e:
 89                 logging.error(e)
 90
 91 B       return data
(Pdb) c
2019-10-24 22:35:38,658 charges_calc.py:81  WARNING rental_end: 2018-07-29 00:00:00 is a date before rental_start: 2018-08-26 00:00:00
2019-10-24 22:35:38,658 charges_calc.py:89  ERROR math domain error

... ERROR and WARNING Logs due to invalid date ranges....

2019-10-24 22:35:39,238 charges_calc.py:81  WARNING rental_end: 2016-12-28 00:00:00 is a date before rental_start: 2018-07-13 00:00:00
2019-10-24 22:35:39,240 charges_calc.py:89  ERROR math domain error
Traceback (most recent call last):
  File "C:\Users\snip3\AppData\Local\Programs\Python\Python37\lib\pdb.py", line 1697, in main
    pdb._runscript(mainpyfile)
  File "C:\Users\snip3\AppData\Local\Programs\Python\Python37\lib\pdb.py", line 1566, in _runscript
    self.run(statement)
  File "C:\Users\snip3\AppData\Local\Programs\Python\Python37\lib\bdb.py", line 585, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py", line 106, in <module>
    data = calculate_additional_fields(data)
  File "f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py", line 78, in calculate_additional_fields
    rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
  File "C:\Users\snip3\AppData\Local\Programs\Python\Python37\lib\_strptime.py", line 577, in _strptime_datetime
    tt, fraction, gmtoff_fraction = _strptime(data_string, format)
  File "C:\Users\snip3\AppData\Local\Programs\Python\Python37\lib\_strptime.py", line 359, in _strptime
    (data_string, format))
ValueError: time data '' does not match format '%m/%d/%y'
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> c:\users\snip3\appdata\local\programs\python\python37\lib\_strptime.py(359)_strptime()
-> (data_string, format))
(Pdb) n
Post mortem debugger finished. The charges_calc.py will be restarted
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(3)<module>()
-> '''
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import datetime
  6     import json
  7     import logging
  8     import math
  9     import errno
 10
 11     from argparse import RawTextHelpFormatter
 12
 13     def parse_cmd_arguments():
 14         debug_help = str('Sets the logging level.' +
 15                          '\nAccepted values:'
 16                          '\n\t0 - None (default)' +
 17                          '\n\t1 - errors only' +
 18                          '\n\t2 - errors and warnings,' +
 19                          '\n\t3 - errors, warnings and debug messages')
 20
 21         parser = argparse.ArgumentParser(description='Process some integers.',
 22                                          formatter_class=RawTextHelpFormatter)
 23         parser.add_argument('-i', '--input',
 24                             help='input JSON file', required=True)
 25         parser.add_argument('-o', '--output',
 26                             help='ouput JSON file', required=True)
 27         parser.add_argument('-d', '--debug', type=int, default=0, help=debug_help)
 28
 29         return parser.parse_args()
 30
 31     def set_logging(level):
 32         log_level = parse_log_level(level)
 33         log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'.log'
 34         formatter = str("%(asctime)s %(filename)s:%(lineno)-3d " +
 35                         "%(levelname)s %(message)s")
 36         log_format = logging.Formatter(formatter)
 37
 38         file_handler = get_handler(logging.FileHandler, log_level, log_format, log_file)
 39         console_handler = get_handler(logging.StreamHandler, log_level, log_format)
 40
 41         logger = logging.getLogger()
 42         logger.setLevel(log_level)
 43         logger.addHandler(file_handler)
 44         logger.addHandler(console_handler)
 45
 46     def get_handler(handler, log_level, formatter, file=None):
 47         return_handler = handler(file)
 48         return_handler.setLevel(log_level)
 49         return_handler.setFormatter(formatter)
 50         return return_handler
 51
 52     def parse_log_level(level):
 53         if level == 0:
 54             return logging.NOTSET
 55         elif level == 1:
 56             return logging.ERROR
 57         elif level == 2:
 58             return logging.WARNING
 59         elif level == 3:
 60             return logging.DEBUG
 61
 62         raise ValueError(f"Logging level {level} has no implementation.")
 63
 64     def load_rentals_file(filename):
 65         try:
 66             with open(filename) as file:
 67                 data = json.load(file)
 68         except Exception as e:
 69             logging.error(e)
 70             logging.debug(f"Unable to load file: {filename}")
 71             exit(errno.EAGAIN)  # Exit with code to tell OS a problem occured.
 72         return data
 73
 74     def calculate_additional_fields(data):
 75         for value in data.values():
 76             logging.info(f"Processing value: {value}")
 77             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 78             rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 79
 80             if rental_end < rental_start:
 81                 logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 82
 83             try:
 84                 value['total_days'] = (rental_end - rental_start).days
 85                 value['total_price'] = value['total_days'] * value['price_per_day']
 86                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 87                 value['unit_cost'] = value['total_price'] / value['units_rented']
 88             except Exception as e:
 89                 logging.error(e)
 90
 91 B       return data
 92
 93     def save_to_json(filename, data):
 94         try:
 95             with open(filename, 'w') as file:
 96                 json.dump(data, file)
 97         except Exception as e:
 98             logging.error(e)
 99             logging.debug(f"Unable to save file: {filename}")
100             exit(errno.EAGAIN)  # Exit with code to tell OS a problem occured.
101
102     if __name__ == "__main__":
103         args = parse_cmd_arguments()
104         set_logging(args.debug)
105         data = load_rentals_file(args.input)
106 B       data = calculate_additional_fields(data)
107         save_to_json(args.output, data)
(Pdb) h

Documented commands (type help <topic>):
========================================
EOF    c          d        h         list      q        rv       undisplay
a      cl         debug    help      ll        quit     s        unt
alias  clear      disable  ignore    longlist  r        source   until
args   commands   display  interact  n         restart  step     up
b      condition  down     j         next      return   tbreak   w
break  cont       enable   jump      p         retval   u        whatis
bt     continue   exit     l         pp        run      unalias  where

Miscellaneous help topics:
==========================
exec  pdb

(Pdb) disable 1
Disabled breakpoint 1 at f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py:106
(Pdb) disable 2
Disabled breakpoint 2 at f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py:91
(Pdb) b 76
Breakpoint 3 at f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py:76
(Pdb) condition 3 value['rental_start'] == '' or value['rental_end'] == ''
New condition set for breakpoint 3.
(Pdb) c
2019-10-24 22:41:28,757 charges_calc.py:81  WARNING rental_end: 2017-03-22 00:00:00 is a date before rental_start: 2017-06-12 00:00:00
2019-10-24 22:41:28,757 charges_calc.py:81  WARNING rental_end: 2017-03-22 00:00:00 is a date before rental_start: 2017-06-12 00:00:00

... ERROR and WARNING Logs due to invalid date ranges....

2019-10-24 22:41:29,893 charges_calc.py:89  ERROR math domain error
2019-10-24 22:41:29,893 charges_calc.py:89  ERROR math domain error
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(76)calculate_additional_fields()
-> logging.info(f"Processing value: {value}")
(Pdb) ll
 74     def calculate_additional_fields(data):
 75         for value in data.values():
 76 B->         logging.info(f"Processing value: {value}")
 77             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 78             rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 79
 80             if rental_end < rental_start:
 81                 logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 82
 83             try:
 84                 value['total_days'] = (rental_end - rental_start).days
 85                 value['total_price'] = value['total_days'] * value['price_per_day']
 86                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 87                 value['unit_cost'] = value['total_price'] / value['units_rented']
 88             except Exception as e:
 89                 logging.error(e)
 90
 91 B       return data
(Pdb) value
{'product_code': 'PRD70', 'units_rented': 1, 'price_per_day': 14, 'rental_start': '6/19/16', 'rental_end': ''}
(Pdb)



----------------------------------------------------------------------------------------------------------------------------------------------------------------



Final Debugging: No other bugs found.

F:\gitUwPython\SP_Python220B_2019\students\anthony_mckeever\lesson_2\assignment_1\code>python -m pdb charges_calc.py -i source.json -o output.json -d 2
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(3)<module>()
-> '''
(Pdb) ll
  1     '''
  2     Returns total price paid for individual rentals
  3  -> '''
  4     import argparse
  5     import datetime
  6     import errno
  7     import json
  8     import logging
  9     import math
 10
 11     from argparse import RawTextHelpFormatter
 12
 13     def parse_cmd_arguments():
 14         debug_help = str('Sets the logging level.' +
 15                          '\nAccepted values:'
 16                          '\n\t0 - None (default)' +
 17                          '\n\t1 - errors only' +
 18                          '\n\t2 - errors and warnings,' +
 19                          '\n\t3 - errors, warnings and debug messages')
 20
 21         parser = argparse.ArgumentParser(description='Process some integers.',
 22                                          formatter_class=RawTextHelpFormatter)
 23         parser.add_argument('-i', '--input',
 24                             help='input JSON file', required=True)
 25         parser.add_argument('-o', '--output',
 26                             help='ouput JSON file', required=True)
 27         parser.add_argument('-d', '--debug', type=int, default=0, help=debug_help)
 28
 29         return parser.parse_args()
 30
 31     def set_logging(level):
 32         log_level = parse_log_level(level)
 33
 34         if log_level == logging.NOTSET:
 35             return
 36
 37         log_file = datetime.datetime.now().strftime("%Y-%m-%d")+'.log'
 38         formatter = str("%(asctime)s %(filename)s:%(lineno)-3d " +
 39                         "%(levelname)s %(message)s")
 40         log_format = logging.Formatter(formatter)
 41
 42         file_handler = get_handler(logging.FileHandler, log_level, log_format, log_file)
 43         console_handler = get_handler(logging.StreamHandler, log_level, log_format)
 44
 45         logger = logging.getLogger()
 46         logger.setLevel(log_level)
 47
 48         logger.addHandler(file_handler)
 49         logger.addHandler(console_handler)
 50
 51     def get_handler(handler, log_level, formatter, file=None):
 52         return_handler = handler(file)
 53         return_handler.setLevel(log_level)
 54         return_handler.setFormatter(formatter)
 55         return return_handler
 56
 57     def parse_log_level(level):
 58         if level == 0:
 59             return logging.NOTSET
 60         elif level == 1:
 61             return logging.ERROR
 62         elif level == 2:
 63             return logging.WARNING
 64         elif level == 3:
 65             return logging.DEBUG
 66
 67         raise ValueError(f"Logging level {level} has no implementation.")
 68
 69     def load_rentals_file(filename):
 70         try:
 71             with open(filename) as file:
 72                 data = json.load(file)
 73         except Exception as e:
 74             logging.error(e)
 75             logging.debug(f"Unable to load file: {filename}")
 76
 77             exit(errno.EAGAIN)  # Exit with code to tell OS a problem occured.
 78         return data
 79
 80     def calculate_additional_fields(data):
 81         for value in data.values():
 82             try:
 83                 rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 84                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 85
 86                 if rental_end < rental_start:
 87                     logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 88                     logging.debug(f"Warning logged for {value}.")
 89                     logging.debug("This value was not processed.")
 90                     continue
 91
 92                 value['total_days'] = (rental_end - rental_start).days
 93                 value['total_price'] = value['total_days'] * value['price_per_day']
 94                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 95                 value['unit_cost'] = value['total_price'] / value['units_rented']
 96             except Exception as e:
 97                 logging.error(e)
 98                 logging.debug(f"Exception logged for {value}")
 99
100         return data
101
102     def save_to_json(filename, data):
103         try:
104             with open(filename, 'w') as file:
105                 json.dump(data, file)
106         except Exception as e:
107             logging.error(e)
108             logging.debug(f"Unable to save file: {filename}")
109
110             exit(errno.EAGAIN)  # Exit with code to tell OS a problem occured.
111
112     if __name__ == "__main__":
113         args = parse_cmd_arguments()
114         set_logging(args.debug)
115
116         data = load_rentals_file(args.input)
117         data = calculate_additional_fields(data)
118
119         save_to_json(args.output, data)
(Pdb) b 83
Breakpoint 1 at f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py:83
(Pdb) condition 1 value['rental_start'] == '' or value['rental_end'] == ''
New condition set for breakpoint 1.
(Pdb) c
2019-10-24 23:03:51,346 charges_calc.py:87  WARNING rental_end: 2017-03-22 00:00:00 is a date before rental_start: 2017-06-12 00:00:00

... Warning Logs from invalid date ranges...

2019-10-24 23:03:51,697 charges_calc.py:87  WARNING rental_end: 2016-12-28 00:00:00 is a date before rental_start: 2018-07-13 00:00:00
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(83)calculate_additional_fields()
-> rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
(Pdb) value
{'product_code': 'PRD70', 'units_rented': 1, 'price_per_day': 14, 'rental_start': '6/19/16', 'rental_end': ''}
(Pdb) ll
 80     def calculate_additional_fields(data):
 81         for value in data.values():
 82             try:
 83 B->             rental_start = datetime.datetime.strptime(value['rental_start'], '%m/%d/%y')
 84                 rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
 85
 86                 if rental_end < rental_start:
 87                     logging.warning(f"rental_end: {rental_end} is a date before rental_start: {rental_start}")
 88                     logging.debug(f"Warning logged for {value}.")
 89                     logging.debug("This value was not processed.")
 90                     continue
 91
 92                 value['total_days'] = (rental_end - rental_start).days
 93                 value['total_price'] = value['total_days'] * value['price_per_day']
 94                 value['sqrt_total_price'] = math.sqrt(value['total_price'])
 95                 value['unit_cost'] = value['total_price'] / value['units_rented']
 96             except Exception as e:
 97                 logging.error(e)
 98                 logging.debug(f"Exception logged for {value}")
 99
100         return data
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(84)calculate_additional_fields()
-> rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
(Pdb) n
ValueError: time data '' does not match format '%m/%d/%y'
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(84)calculate_additional_fields()
-> rental_end = datetime.datetime.strptime(value['rental_end'], '%m/%d/%y')
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(96)calculate_additional_fields()
-> except Exception as e:
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(97)calculate_additional_fields()
-> logging.error(e)
(Pdb) n
2019-10-24 23:04:10,381 charges_calc.py:97  ERROR time data '' does not match format '%m/%d/%y'
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(98)calculate_additional_fields()
-> logging.debug(f"Exception logged for {value}")
(Pdb) n
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(81)calculate_additional_fields()
-> for value in data.values():
(Pdb) c
2019-10-24 23:04:15,682 charges_calc.py:87  WARNING rental_end: 2017-01-03 00:00:00 is a date before rental_start: 2018-01-13 00:00:00

... Warning Logs from invalid date ranges...

2019-10-24 23:04:15,769 charges_calc.py:87  WARNING rental_end: 2016-10-02 00:00:00 is a date before rental_start: 2018-10-12 00:00:00
The program finished and will be restarted
> f:\gituwpython\sp_python220b_2019\students\anthony_mckeever\lesson_2\assignment_1\code\charges_calc.py(3)<module>()
-> '''
(Pdb)